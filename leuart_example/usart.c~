#include <stdint.h>

#include "mcu.h"

struct usart_pins {
    uint8_t clk;
    uint8_t ss;
    uint8_t miso;
    uint8_t mosi;
};

static struct usart_pins usart0_pins[] = {
    {.clk = PE12, .ss = PE13, .miso = 0xff, .mosi = 0xff}, // 0
    {.clk = 0xff, .ss = 0xff, .miso = 0xff, .mosi = 0xff}, // 1
    {.clk = 0xff, .ss = 0xff, .miso = 0xff, .mosi = 0xff}, // 2
    {.clk = PC15, .ss = PC14, .miso = PE12, .mosi = PE13}, // 3
    {.clk = PB13, .ss = PB14, .miso = PB7,  .mosi = PB7},  // 4
    {.clk = PB13, .ss = PB14, .miso = PC1,  .mosi = PC0},  // 5
    {.clk = PE12, .ss = PB13, .miso = PC1,  .mosi = PC0},  // 6
};

static struct usart_pins usart1_pins[] = {
    {.clk = PB7,  .ss = PB8,  .miso = PC1,  .mosi = PC0},  // 0
    {.clk = 0xff, .ss = 0xff, .miso = 0xff, .mosi = 0xff}, // 1
    {.clk = PF0,  .ss = PF1,  .miso = 0xff, .mosi = 0xff}, // 2
    {.clk = PC15, .ss = PC14, .miso = 0xff, .mosi = 0xff}, // 3
    {.clk = PB11, .ss = PC14, .miso = PB7,  .mosi = PB7},  // 4
    {.clk = PB13, .ss = PB14, .miso = PC1,  .mosi = PC0},  // 5
    {.clk = PE12, .ss = PB13, .miso = PC1,  .mosi = PC0},  // 6
};


void init_usart(USART_TypeDef usart, uint32_t location) {
    USART0->CTRL = 0;
    USART0->CTRL = USART_CTRL_SYNC | USART_CTRL_MSBF;

    USART0->FRAME = 0;
    USART0->FRAME = USART_FRAME_DATABITS_EIGHT;

    USART0->CMD = USART_CMD_CLEARRX | USART_CMD_CLEARTX;
    USART0->CMD = USART_CMD_MASTEREN | USART_CMD_TXEN | USART_CMD_RXEN;

    USART0->ROUTE = USART0_LOCATION;
    USART0->ROUTE |= USART_ROUTE_CLKPEN;
    USART0->ROUTE |= USART_ROUTE_TXPEN;
    USART0->ROUTE |= USART_ROUTE_RXPEN;

    gpio_mode(USART0_CLK, GPIO_MODE_PUSHPULL);
    gpio_mode(USART0_MISO, GPIO_MODE_INPUT);
    gpio_mode(USART0_MOSI, GPIO_MODE_PUSHPULL);
}

uint8_t usart0_transfer_byte(uint8_t data){
        while (!(USART0->STATUS & USART_STATUS_TXBL)){} // WAIT
        USART0->TXDATA = (uint32_t)(data) & 0xffUL;
        while (!(USART0->STATUS & USART_STATUS_RXDATAV)){} // WAIT
        return (uint8_t) USART0->RXDATA & 0xffUL;
}

void usart0_transfer(uint8_t* data, size_t len) {
    size_t i;
    USART0->CMD = USART_CMD_CLEARRX | USART_CMD_CLEARTX;
    for (i = 0; i < len; i++) {
        data[i] = usart0_transfer_byte(data[i]);
    }
}
